// import express, { Express, Request, Response } from 'express';
// import dotenv from 'dotenv';
// import taskRouter from './routes/taskRouter';
// import cors from 'cors';
// import bodyParser from 'body-parser';
// dotenv.config();

// const app: Express = express();
// // const port = process.env.PORT;
// const port = 8080;


// app.use(express.json);
// app.use(cors());
// app.use(bodyParser.json());


// app.get('/', (req: Request, res: Response) => {
//     res.send('Express + TypeScript Server');
// });

// app.use('/api', taskRouter);



// app.listen(port, () => {
//   console.log(`⚡️[server]: Server is running at https://localhost:${port}`);
// });









import express, { Express, NextFunction, Request, Response } from 'express';
import dotenv from 'dotenv';
import taskRouter from './routes/taskRouter';
import cors from 'cors';
import CryptoJS from 'crypto-js';
import bodyParser from 'body-parser';
import addTask from './controller/taskCtrl';
import db from './database';

dotenv.config();

// sa a l'air deprecated
import request from 'request';
//

const app: Express = express();
// const port = process.env.PORT;
const port = 8080;

//
const API_URL = "https://accounts.spotify.com/api/token";
const CLIENT_ID = "a5cb39302b6e4c64957de1df50742d71";
const CLIENT_SECRET = "e23db1cd77ee4b589ee99525e282b2e8";
const CLIENT_CALLBACK_URL = process.env.CLIENT_CALLBACK_URL;
const ENCRYPTION_SECRET = process.env.ENCRYPTION_SECRET;

app.use(bodyParser.urlencoded({
    extended: true
  }));
  app.use(bodyParser.json());
  app.use(cors({
    origin: true,
    credentials: true
  }));

//



app.get('/', (req: Request, res: Response) => {
  res.send('Express + TypeScript Server');
});
app.use(express.json());
////// app.use('/api', taskRouter);
// app.use(cors());
// app.use(bodyParser.json());


app.post('/task', async(req, res) => {
    try {
        const data = req.body;
        console.log(data);
        await db.collection('task').add(data);
        // await db.collection('students").doc().set(data);
        console.log('here');

        res.send('Success add');
    } catch (error) {
        res.status(400).send('Cannot add student');
    }
});


app.listen(port, () => {
  console.log(`[server]: Server is running at https://localhost:${port}`);
});

//

// const spotifyRequest = async(req : Request, res : Response) => {
//     return new Promise((resolve, reject) => {
//         request.post(API_URL, {
//           form:{
//             code: code,
//             redi
//           },
//           headers: {
//             'Authorization': 'Basic ' + (new Buffer(CLIENT_ID + ':' + CLIENT_SECRET).toString('base64')
//           },
//           json: true
//         }, (err, resp) => err ? reject(err) : resolve(resp));
//       })
//       .then(resp => {
//         if (resp.statusCode != 200) {
//           return Promise.reject({
//             statusCode: resp.statusCode,
//             body: resp.body
//           });
//         }
//         return Promise.resolve(resp.body);
//       })
//       .catch(err => {
//         return Promise.reject({
//           statusCode: 500,
//           body: JSON.stringify({})
//         });
//       });
//   };


// const spotifyRequest = (code, ) => {
//     return new Promise((resolve, reject) => {
//         request.post(API_URL, {
//           form: {
//               code:
//              grant_type:
//              redirect_uri:
//           },
//           headers: {
//             "Authorization": "Basic " + new Buffer(CLIENT_ID + ":" + CLIENT_SECRET).toString('base64')
//           },
//           json: true
//         }, (err, resp) => err ? reject(err) : resolve(resp));
//       })
//       .then(resp => {
//         if (resp.statusCode != 200) {
//           return Promise.reject({
//             statusCode: resp.statusCode,
//             body: resp.body
//           });
//         }
//         return Promise.resolve(resp.body);
//       })
//       .catch(err => {
//         return Promise.reject({
//           statusCode: 500,
//           body: JSON.stringify({})
//         });
//       });
//   };



type params = {
    grant_type: string,  
    redirect_uri?: string,
    code?: string,
    refresh_token?: string,
}

const spotifyRequest = (params : params) => {
    return new Promise<any>((resolve, reject) => { // à la place de any mettre TRequest
        request.post(API_URL, {
          form: params,
          headers: {
            "Authorization": "Basic " + new Buffer(CLIENT_ID + ":" + CLIENT_SECRET).toString('base64')
          },
          json: true
        }, (err, resp) => err ? reject(err) : resolve(resp));
      })
        .then(resp => {
            if (resp.statusCode != 200) {
            return Promise.reject({
                statusCode: resp.statusCode,
                body: resp.body
            });
            }
            return Promise.resolve(resp.body);
        })
        .catch(err => {
            return Promise.reject({
            statusCode: 500,
            body: JSON.stringify({})
            });
        });
  };


  app.post('/exchange', (req, res) => {

    const params : params = req.body;
    if (!params.code) {
      return res.json({
        "error": "Parameter missing"
      });
    }
  
    spotifyRequest({
        grant_type: "authorization_code",
        redirect_uri: CLIENT_CALLBACK_URL,
        code: params.code
      })
      .then(session => {
        let result = {
          "access_token": session.access_token,
          "expires_in": session.expires_in,
          "refresh_token": encrypt(session.refresh_token)
        };
        return res.send(result);
      })
      .catch(response => {
        return res.json(response);
      });
  });
  
  // Get a new access token from a refresh token
  app.post('/refresh', (req, res) => {
    const params = req.body;
    if (!params.refresh_token) {
      return res.json({
        "error": "Parameter missing"
      });
    }
  
    spotifyRequest({
        grant_type: "refresh_token",
        refresh_token: decrypt(params.refresh_token)
      })
      .then(session => {
        return res.send({
            "access_token": session.access_token,
            "expires_in": session.expires_in
        });
      })
      .catch(response => {
        return res.json(response);
      });
  });


  function encrypt(text : any) {
    return CryptoJS.AES.encrypt(text, ENCRYPTION_SECRET).toString();
  };
  
  function decrypt(text : any) {
    var bytes = CryptoJS.AES.decrypt(text, ENCRYPTION_SECRET);
    return bytes.toString(CryptoJS.enc.Utf8);
  };
  